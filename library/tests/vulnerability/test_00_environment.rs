whitebeam_test!("linux", vulnerability_00_LD_BIND_NOW {
    // Ensure that specifying LD_BIND_NOW causes programs to abort
    let baseline_true_exit = std::process::Command::new("/usr/bin/true").status().expect("true command failed to start");
    assert!(baseline_true_exit.success());
    let bind_now_true_exit = std::process::Command::new("/usr/bin/true")
                                                   .stderr(std::process::Stdio::null())
                                                   .env("LD_BIND_NOW", "1").status().expect("true command failed to start");
    assert!(!(bind_now_true_exit.success()));
});

whitebeam_test!("linux", vulnerability_01_LD_PRELOAD_LD_AUDIT {
    // Ensure that Prevention blocks non-whitelisted LD_PRELOAD and LD_AUDIT libraries specified by environment variables
    // Ref: https://github.com/WhiteBeamSec/WhiteBeam/security/advisories/GHSA-mm3f-f5hg-p2hv
    let libcap: &str = &format!("/lib/{}-linux-gnu/libcap.so.2", std::env::consts::ARCH);
    crate::common::toggle_prevention(true);
    let blocked_libs_whoami_output = std::process::Command::new("/usr/bin/bash")
                                                         .arg("-c")
                                                         .arg(&format!("LD_PRELOAD={} LD_AUDIT={} /usr/bin/whoami", libcap, libcap))
                                                         .output().expect("bash command failed to start");
    crate::common::toggle_prevention(false);
    let blocked_libs_whoami_stderr = String::from_utf8_lossy(&blocked_libs_whoami_output.stderr);
    assert!(blocked_libs_whoami_stderr.contains(&format!("ERROR: ld.so: object '{}' cannot be loaded as audit interface: cannot open shared object file; ignored", libcap)));
    assert!(blocked_libs_whoami_stderr.contains(&format!("ERROR: ld.so: object '{}' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored", libcap)));
});